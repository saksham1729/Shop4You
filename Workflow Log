Project Progress Summary (Django E-commerce)**

[June 30, 2025]** Project setup (`shoppinglyx`), app created, static/media config, Bootstrap added
[July 1, 2025]** Product model created (title, image, price, brand, category, etc.)
[July 1, 2025]** Product listing by category: Topwear, Bottomwear, Mobile, Laptop
[July 2, 2025]** Cart system added: add/remove/update items using AJAX
[July 2, 2025]** Checkout page with address selection and cart summary
[July 3, 2025]** Orders model and page with delivery progress bar
[July 3, 2025]** User registration with Django `UserCreationForm`
[July 4, 2025]** Email OTP-based user verification integrated via Mailtrap(Not Implemented)
[July 4, 2025]** Password reset, change, login/logout setup
[July 4, 2025]** Fixed layout issues on orders page with Bootstrap
[July 5, 2025]** Image size inconsistencies resolved in product sliders and category listings
[July 5, 2025]** Dynamic filtering by brand/price for Topwear, Bottomwear, etc.
[July 5, 2025]** Added error handling for empty cart removal, invalid URLs, and 500s
[July 6, 2025]** Created custom OTP registration flow with redirection and validation (Not Implemented)

[July 7, 2025]

* Implemented `add_to_cart` view with duplicate-check logic.
* Added `show_cart` view to display products, total, and shipping.
* Added `plus_cart` view with AJAX to increase quantity.
* Introduced dynamic amount and total calculation on quantity update.

[July 8, 2025]

* Fixed `TabError` due to mixed tabs/spaces.
* Updated `plus_cart` and `minus_cart` views to calculate and return:
  * `quantity`
  * `amount`, `totalamount`
  * `totalitem` for cart icon
* Updated JavaScript to:
  * Send AJAX on `.plus-cart` click
  * Update quantity, price, and cart icon without page refresh
* Fixed `minus_cart` crash by replacing list with QuerySet (`filter()`).
* Created `context_processors.py` to make `totalitem` globally available.
* Registered context processor in `settings.py`.
* Added styled `<hr>` tag to front page to visually separate rows/sections.


ISSUES TO BE SOLVED>>>>>
Multiple Address not getting saved.
Serach bar not working. 
Shipping charges not updating dynamically.

ABOVE ISSUES RESOLVED on 11th July, 2025.

[11th July 2025]

   * Implemented dynamic cart using AJAX for plus, minus, and remove actions.
   * Updated cart total and item count without page reload.
   * Automatically removed cart item from DOM when quantity hit zero.
   * Showed "You have no Product in Your Cart" message + image when all items removed.
    Fixed:
        ‚úÖ Cart icon not updating
        ‚úÖ Duplicate empty-cart message
        ‚úÖ Image border (removed img-thumbnail)
        ‚úÖ Card boxes (used soft shadows instead)
        ‚úÖ Removed bottom border under "Cart Items"

[14th July 2025]
    ‚úÖ Integrated Botpress chatbot embed script on website.
    ‚úÖ Modified chatbot styling to fit full container.
    ‚úÖ Confirmed chatbot loads on page and opens automatically.
    ‚úÖ Asked how to upgrade to a user-personalized chatbot.
    ‚úÖ Received step-by-step guide for:
        Django backend API setup for user data.
        Auth token/user ID passing via webchat.
        Writing Botpress custom action to call API.
        Secure communication (CORS, HTTPS).

[15th July 2025]
   * Added product location field to Product model
   * Applied migrations to update database schema
   * Implemented order tracking view using user and product coordinates
   * Integrated Leaflet map in track_order.html to display delivery route
   * Fixed NoReverseMatch error in orders.html by correcting URL arguments
   * Created missing track_order.html template under correct path
   * Added estimated delivery time (ETA) calculation in view
   * Centered the map on the page using Bootstrap utilities
   * Handled GeocoderUnavailable by considering increased timeout or fallback options
   * Prepared for future enhancement with real-time tracking and status icons

 [16th July 2025]
   * Django Setup: Configured project, static/media files.
   * User Auth: Email-enabled registration, login, password, profile forms.
   * Templates/URLs: Linked views via clean templates and URL routing.
   * Stripe Payments: Integrated gateway; added success/cancel pages.
   * Testing: Debugged flows, verified functionality.
   * Mailtrap: Set up email testing.

[17 July 2025]

   * Positioned chat window to float above the icon (bottom: 85px)
   * Made header fixed inside chat (position: sticky)
   * Enabled scrollable message area below header
   * Styled input field with rounded design and focus effects
   * Optimized CSS structure and ensured dark mode support

[18th &  19th July 2025]
   * Learning about the different Recommendation System Model 
   * Built the Sentiment Analysis System to gain hands on practise of the logistisc regression Model and also LSTM.
   * Compared the accuracy of Logestic Regression, Decision Tree , SVM and Random forest Models.
    


[22 July 2025]
‚úÖ Recommendation System Fixes
    Resolved Django error: Cannot create distinct fields once a slice has been taken
    Refactored query to apply .distinct() before slicing and added .order_by('id')
    Styled recommendation results with images, prices, and emojis in HTML format
‚úÖ Chatbot Frontend Integration
    Enabled rich HTML rendering in BotUI via { type: 'html' }
    Ensured <img> and <div> blocks display product visuals correctly
    Helped update JavaScript to use innerHTML safely for rendering dynamic HTML
‚úÖ Rating Workflow for Ordered Products
    Built a Django view submit_rating() that allows users to rate products they‚Äôve purchased
    Connected review form to orders page (orders.html) using conditional display logic
    Restricted form to only show for 'Delivered' products
‚úÖ Dynamic Review Display Logic
    Ensured review form is hidden once a user has rated the product
    Fixed template issues with unsupported tags like .get() and .first()
    Moved review lookup logic to the view: passed user_reviews dictionary to template
‚úÖ Custom Template Filter
    Created a dict_get filter to safely access review objects in templates
    Used {% load custom_tags %} to enable dictionary access for cleaner rendering

[July 23] ‚Äì Debugging and Dynamic Context Optimization

    Identified rendering issues in Django views related to nested templates
    Traced context leaks that caused incorrect variable propagation between views
    Refactored view logic to streamline template context delivery
    Verified rendering flow using test cases across different user scenarios

[July 24] ‚Äì Improving Review Logic & Delivery ETA Calculations

    Audited user flow to locate loopholes allowing multiple review submissions
    Implemented conditional logic in templates to suppress redundant review buttons
    Enhanced Django backend ETA logic with dynamic thresholds based on location and package weight
    Tested delivery estimate outputs across various mock orders for accuracy

[July 25] ‚Äì Model Retraining and Validation

    Aggregated user interaction data from the past week for model input enrichment
    Retrained collaborative filtering-based recommendation model with fresh ratings
    Evaluated precision and recall of recommendations after retraining
    Logged model versioning and performance metrics for rollback safety

[July 26] ‚Äì Dependency Conflict Resolution

    Investigated deep dependency collisions between TensorFlow 2.x, scikit-learn, and NumPy
    Isolated conflicting submodules and created virtual environments for segmented testing
    Patched broken imports and resolved pip installation failures using constraint files
    Documented compatibility matrix for future reference and onboarding

[July 27] ‚Äì Modular Workflow Evaluation

    Split large monolithic components into modular Django apps with isolated responsibilities
    Benchmarked API response times after workflow segmentation
    Ran load tests on collaborative filtering algorithms using altered rating distribution
    Tweaked fallback recommendation logic to handle cold-start scenarios

[July 28] ‚Äì Deployment & Documentation

    Deployed updated Streamlit applications for internal UX review
    Integrated dynamic delivery logic visualizations into the dashboard
    Drafted technical documentation for context management, model integration, and delivery workflows
    Prepared a team sync summary to highlight architectural changes and model enhancements

[29 July 2025]


üåê Template Enhancements

    Refactored Django templates to support both uploaded and externally linked images:
        Applied conditional rendering logic in product listing and Owl Carousel sections.
        Included fallback display using a default static image when no source is available.

üñºÔ∏è Visual Consistency

    Adjusted layout elements for responsive design:
        Applied Bootstrap spacing utilities (mb-2, mb-4) and image classes for clean UI.
    Discussed reusable logic options:
        Considered implementing a custom template tag to simplify image source selection across pages.

üìä Dataset Preprocessing

    Cleaned and prepared fresh user interaction dataset for model updates:
        Removed incomplete records and outliers to maintain data integrity.
        Normalized features and applied one-hot encoding for categorical variables (e.g. product categories, device types).
        Generated dynamic user-product matrices for rating prediction and behavioral analysis.

üîÅ Machine Learning Model Retraining

    Retrained recommendation model using updated dataset:
        Integrated recent interaction data to improve personalization accuracy.
        Validated training performance across cold-start scenarios using fallback logic.
        Ensured deployment compatibility with web interfaces via Streamlit and Gradio.

üìà Optimization Insights
    Improved user-centric features:
        Boosted ETA calculation accuracy for delivery workflows.
        Monitored user engagement and click-through trends for evolving feedback loops.


[30 July 2025]

    Completed debugging of OTP registration flow using Twilio Verify and session-based fallback
    Refactored broken view logic with multiple post methods into a unified class-based view
    Implemented uniqueness checks for username, email, and phone
    Designed initial test cases to mock OTP verification and simulate user registration
    Resolved broken pipe errors related to excessive static asset requests
    Debugged fallback image rendering for products missing media
    Began integration of recommendation system with basic error handling for user context


[31 July 2025]

    Implemented 3-stage OTP-based registration flow with manual Twilio SMS logic
    Updated forms.py and refactored views using stage control
    Reworked template for progressive form rendering
    Resolved key bugs: form import, model fields, null checks, navbar alignment


[August 4, 2025]
 Virtual Try-On Integration Planning

    Analyzed the full architecture of the AI shopping assistant:
        IDM-VTON model hosted via Hugging Face Space.
        Gradio MCP server setup with vton_generation tool.
        VS Code AI Chat configuration using mcp.json.

Website Implementation Strategy

    Mapped out how to integrate the virtual try-on flow into a Django e-commerce platform.
    Designed:
        Frontend UI for image and garment upload.
        Backend view to invoke the MCP server and display try-on results.

Referenced Technical Documentation
    Incorporated the official Gradio MCP + IDM-VTON blog post to validate implementation steps.
    Adapted configurations for deployment readiness and public access.

[5 August 2025]

 Data Preprocessing
 Categorizing the products 
 Home Page Slider Animation

 [6 August 2025]

1. Lottie Animations Integration

Added Lottie SVG animations (truck, financial report, payment success) to various pages.
Ensured correct placement and sizing (e.g., right of map, centered in success page).
Fixed issues with duplicate and missing icons by correcting template structure and script usage.
2. Expense Tracker Feature

Implemented an expense tracker page using the OrderPlaced model.
Enabled period selection (daily, weekly, monthly) with a dropdown.
Filtered purchases and calculated totals for each period.
Passed product names and prices to the template for visualization.
3. Chart Visualization

Used Chart.js to display a bar graph showing the relationship between product names and their costs for the selected period.
Ensured the graph updates dynamically based on the period selected.
4. Template/UI Improvements

Centered Lottie and other elements using Bootstrap flex utilities.
Adjusted navbar to display "Expense Track" in a single line with a small font.
Added a total row to the expense table.

[7 August 2025]

    üîß Search Fix: Updated search_products view to handle missing product_image by falling back to img_link or default image.

    üñºÔ∏è Zoom Feature: Implemented square lens zoom-on-hover using natural image dimensions and clamped lens movement.

    üß™ UI Debugging: Ensured correct image rendering in productdetail.html; refined CSS for .zoom-result.


[8 August 2025]

    Researched about the Mediapipe and OpenPose Models for Size measurement using the user's image and Height.

[11 August 2025]

    
    Compared the results of the both models mediapipe and openpose while testing in the google colab, and decided to go with the mediapipe model.

[12 August 2025]

    
    Implemented the Mediapipe with the Django E-commerce Project.

[13 August 2025]

   To take it one level up which will  improve its accuracy , landmarks --> world landmarks and also researched about the DensePose,TFIuHD for 3D Mesh representation.

[14 August 2025]

    ‚úÖ Integrated PIFuHD mesh generation into Django pipeline

    üß† Refactored recon.py for PyTorch 2.8 compatibility (add_safe_globals)

    üîß Fixed environment mismatch and subprocess execution using sys.executable

    üß± Resolved Unicode errors in terminal output (emoji-safe logging)

    üß© Updated EvalWPoseDataset to support single-image mode with keypoints

    üõ†Ô∏è Patched missing crop functions (face_crop, upperbody_crop, fullbody_crop)

    üìÇ Created keypoints_generator.py using MediaPipe for auto keypoint extraction

    üîÑ Integrated keypoint generation fallback into recommend_size_view

    üß™ Validated measurement extraction and mesh generation end-to-end
  
